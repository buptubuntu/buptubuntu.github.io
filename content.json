[{"title":"Spring MVC Exception Handling","date":"2016-12-29T10:35:57.000Z","path":"2016/12/29/Spring-MVC-Exception-Handling/","text":"在Spring MVC中可以从三个角度对异常进行处理： 对特定类型的异常进行处理 对特定类型的Controller类进行异常处理 全局异常处理 对特定类型的异常进行处理对于特定类型的异常，我们可以通过给异常类添加ResponseStatus注解，在Controller类抛出此类异常时Spring MVC框架会自动将指定的相应码写入到请求的响应中。 比如如果有一个异常表示没有查询到订单： 1234@ResponseStatus(value=HttpStatus.NOT_FOUND, reason=\"No such Order\") // 404 public class OrderNotFoundException extends RuntimeException &#123; // ... &#125; 在某个Controller中抛出了该异常： 123456789@RequestMapping(value=\"/orders/&#123;id&#125;\", method=GET) public String showOrder(@PathVariable(\"id\") long id, Model model) &#123; Order order = orderRepository.findOrderById(id); if (order == null) throw new OrderNotFoundException(id); model.addAttribute(order); return \"orderDetail\"; &#125; 那么当请求的订单ID不存的时候，请求的响应验证码就是404 单个Controller类中的异常处理在单个Controller类中，我们可以单独定义一个方法，并使用ExceptionHandler注解标注该方法，那么此Contrller类中如果有请求抛出特定异常时将由改方法来处理。代码示例如下： 12345678910111213141516171819202122232425262728293031323334353637383940@Controllerpublic class ExceptionHandlingController &#123; // @RequestHandler methods ... // Exception handling methods // Convert a predefined exception to an HTTP Status code @ResponseStatus(value=HttpStatus.CONFLICT, reason=\"Data integrity violation\") // 409 @ExceptionHandler(DataIntegrityViolationException.class) public void conflict() &#123; // Nothing to do &#125; // Specify name of a specific view that will be used to display the error: @ExceptionHandler(&#123;SQLException.class,DataAccessException.class&#125;) public String databaseError() &#123; // Nothing to do. Returns the logical view name of an error page, passed // to the view-resolver(s) in usual way. // Note that the exception is NOT available to this view (it is not added // to the model) but see \"Extending ExceptionHandlerExceptionResolver\" // below. return \"databaseError\"; &#125; // Total control - setup a model and return the view name yourself. Or // consider subclassing ExceptionHandlerExceptionResolver (see below). @ExceptionHandler(Exception.class) public ModelAndView handleError(HttpServletRequest req, Exception ex) &#123; logger.error(\"Request: \" + req.getRequestURL() + \" raised \" + ex); ModelAndView mav = new ModelAndView(); mav.addObject(\"exception\", ex); mav.addObject(\"url\", req.getRequestURL()); mav.setViewName(\"error\"); return mav; &#125;&#125; 全局异常处理在很多情况下，我们可能想要对所有Controller抛出的异常做统一的处理，在这种情况下，我们可以充分利用Spring提供的切面功能，在Spring MVC中我们可以通过简单的ControllerAdvice注解达到目的。代码示例如下：12345678@ControllerAdviceclass GlobalControllerExceptionHandler &#123; @ResponseStatus(HttpStatus.CONFLICT) // 409 @ExceptionHandler(DataIntegrityViolationException.class) public void handleConflict() &#123; // Nothing to do &#125;&#125; 通过上面的代码，所有Controller抛出的DataIntegrityViolationException异常都讲集中进行处理。","link":"","categories":[],"tags":[{"name":"Spring MVC","slug":"Spring-MVC","permalink":"https://buptubuntu.github.io/tags/Spring-MVC/"},{"name":"Exception Handling","slug":"Exception-Handling","permalink":"https://buptubuntu.github.io/tags/Exception-Handling/"}]},{"title":"Hello World","date":"2016-12-26T07:31:44.000Z","path":"2016/12/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"","categories":[{"name":"tool","slug":"tool","permalink":"https://buptubuntu.github.io/categories/tool/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://buptubuntu.github.io/tags/hexo/"}]}]